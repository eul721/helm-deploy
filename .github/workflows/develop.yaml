name: develop

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: [self-hosted, linux]

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://npm.pkg.github.com/"
          scope: take-two-t2gp
      - run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.T2GP_BUILD_TOKEN }}
      - run: npm run lint
      - run: npm run test
  docker:
    name: Build docker image
    needs: test
    runs-on: [self-hosted, linux]

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://npm.pkg.github.com
          scope: take-two-t2gp
      - name: Gen build info
        run: |
          echo VER=$(git rev-parse --short=8 ${{ github.sha }}) >> $GITHUB_ENV
      - name: build image
        run: |
          docker build -t t2gp-publisher-service --build-arg NPM_TOKEN="${{ secrets.T2GP_BUILD_TOKEN }}" .
      - name: push to ECR
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1
          local-image: t2gp-publisher-service
          image: t2gp-publisher-service:${{ env.VER }}
      - name: clean up
        run: docker image prune -a --force --filter "until=48h"
  k8s-deploy:
    name: Deploy to EKS
    environment: develop
    runs-on: ubuntu-latest
    # runs-on: ubuntu-latest
    needs: docker
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      REGION: us-east-1
    steps:
      # Deploy status
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        if: github.event_name == 'push'
        id: deployment
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          environment: develop
          ref: ${{ github.sha }}
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - uses: actions/checkout@v2
      - name: Gen build info
        run: |
          echo VER=$(git rev-parse --short=8 ${{ github.sha }}) >> $GITHUB_ENV
          REF=$(echo "${{ github.ref }}" | awk -F'/' '{print $3}')
          # TODO: Once production cluster is setup, move production over to new cluster
          CLUSTER=t2gp-debugging
          echo "BRANCH=$REF" >> $GITHUB_ENV
          echo "CLUSTER=$CLUSTER" >> $GITHUB_ENV
      - name: set target env if PR
        if: github.event_name == 'pull_request'
        run: |
          echo BRANCH=${{ env.GITHUB_BASE_REF_SLUG }} >> $GITHUB_ENV
      - name: Authenticate to EKS Cluster
        run: |
          echo KUBETOKEN=$(aws eks get-token --cluster-name ${{ env.CLUSTER }} --region ${{ env.REGION }} | docker run --rm -i imega/jq -c -r '.status.token') >> $GITHUB_ENV
          echo CLUSTER_ENDPOINT=$(aws eks describe-cluster --name ${{ env.CLUSTER }} --region ${{ env.REGION }} | docker run --rm -i imega/jq -c -r '.cluster.endpoint') >> $GITHUB_ENV
      - name: Helm Diffs
        id: helm_diffs
        if: github.event_name == 'pull_request'
        uses: eul721/alpine-kubectl@master
        with:
          command: |-
            kubectl config set-cluster cluster \
              --server=${{ env.CLUSTER_ENDPOINT }} \
              --insecure-skip-tls-verify
            kubectl config set-context cluster \
              --cluster=cluster
            kubectl config use-context cluster
            helm
            helm plugin list
            helm version
            helm diff upgrade --install \
              --kube-token=${{ env.KUBETOKEN }} \
              publisher-service-${{ env.BRANCH }} /github/workspace/helm_chart \
              -n publisher-service \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/base.yaml \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/publisher.yaml \
              --set app.tag=${{ env.VER }}
            helm diff upgrade --install \
              --kube-token=${{ env.KUBETOKEN }} \
              download-service-${{ env.BRANCH }} /github/workspace/helm_chart \
              -n publisher-service \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/base.yaml \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/download.yaml \
              --set app.tag=${{ env.VER }}
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: |
            ${{ steps.helm_diffs.outputs.stdout }}
          check_for_duplicate_msg: true
      - name: Deploy Helm Chart
        if: github.event_name == 'push'
        uses: nmasur/alpine-kubectl@master
        with:
          command: |-
            kubectl config set-cluster cluster \
              --server=${{ env.CLUSTER_ENDPOINT }} \
              --insecure-skip-tls-verify && \
            kubectl config set-context cluster \
              --cluster=cluster && \
            kubectl config use-context cluster && \
            helm upgrade --install \
              publisher-service-${{ env.BRANCH }} /github/workspace/helm_chart \
              --kube-token=${{ env.KUBETOKEN }} \
              --create-namespace \
              -n publisher-service \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/base.yaml \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/publisher.yaml \
              --set app.tag=${{ env.VER }}
            helm upgrade --install \
              download-service-${{ env.BRANCH }} /github/workspace/helm_chart \
              --kube-token=${{ env.KUBETOKEN }} \
              --create-namespace \
              -n publisher-service \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/base.yaml \
              -f /github/workspace/helm_values/${{ env.BRANCH }}/download.yaml \
              --set app.tag=${{ env.VER }}
      - name: Update R53 (Temporary, until migration to flux)
        if: github.event_name == 'push'
        run: |-
          HOSTEDZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name "d2dragon.net" --region ${{ env.REGION }} | docker run --rm -i imega/jq -c -r '.HostedZones[0].Id' | sed 's/\/hostedzone\///g')
          LB_ARN=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=elbv2.k8s.aws/cluster,Values=t2gp-debugging Key=ingress.k8s.aws/stack,Values=publisher-service-${{ env.BRANCH }} Key=ingress.k8s.aws/resource,Values=LoadBalancer --region ${{ env.REGION }} | docker run --rm -i imega/jq -c -r '.ResourceTagMappingList[0].ResourceARN')
          LB_DNSNAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $LB_ARN  --region ${{ env.REGION }} | docker run --rm -i imega/jq -c -r '.LoadBalancers[0].DNSName')
          LB_HOSTED_ZONE=$(aws elbv2 describe-load-balancers --load-balancer-arns $LB_ARN --region ${{ env.REGION }} | docker run --rm -i imega/jq -c -r '.LoadBalancers[0].CanonicalHostedZoneId')
          aws route53 change-resource-record-sets --hosted-zone-id $HOSTEDZONE_ID --region ${{ env.REGION }} --change-batch "{ \
            \"Changes\": [{ \
              \"Action\": \"UPSERT\", \
              \"ResourceRecordSet\": { \
                \"Name\": \"publisher-service-${{ env.BRANCH }}.d2dragon.net\", \
                \"Type\": \"A\", \
                \"AliasTarget\": { \
                  \"HostedZoneId\": \"$LB_HOSTED_ZONE\", \
                  \"DNSName\": \"dualstack.$LB_DNSNAME\", \
                  \"EvaluateTargetHealth\": true \
                } \
              } \
            }] \
          }"
          aws route53 change-resource-record-sets --hosted-zone-id $HOSTEDZONE_ID --region ${{ env.REGION }} --change-batch "{ \
            \"Changes\": [{ \
              \"Action\": \"UPSERT\", \
              \"ResourceRecordSet\": { \
                \"Name\": \"download-service-${{ env.BRANCH }}.d2dragon.net\", \
                \"Type\": \"A\", \
                \"AliasTarget\": { \
                  \"HostedZoneId\": \"$LB_HOSTED_ZONE\", \
                  \"DNSName\": \"dualstack.$LB_DNSNAME\", \
                  \"EvaluateTargetHealth\": true \
                } \
              } \
            }] \
          }"
        # Update deployment status
      - name: Update deployment status (success)
        if: success() && github.event_name == 'push'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: failure() && github.event_name == 'push'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  docs:
    name: "publish develop docs"

    runs-on: [self-hosted, linux]

    needs: test

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: "https://npm.pkg/github.com/"
          scope: take-two-t2gp
      - name: "Install dependencies"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GIT_BUILD_TOKEN }}
        run: npm ci
      - name: "document generation"
        run: npm run doc
      - name: "sync to S3"
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: t2gp-documentation
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-west-2"
          SOURCE_DIR: "docs"
          DEST_DIR: "t2gp-publisher-service/develop"
